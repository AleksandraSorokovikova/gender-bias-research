from openai import OpenAI
import os
from typing import Any


class AnsweringModel:
    def __init__(self, model_name: str = "gpt-4o-mini", temperature: float = 0.2):
        api_key = os.getenv("AIML_API_KEY")
        base_url = "https://api.aimlapi.com/v1"
        self.api = OpenAI(api_key=api_key, base_url=base_url)
        self.model_name = model_name
        self.temperature = temperature

    def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        """
        Generate a response from the model based on the given prompt.

        Args:
            system_prompt (str): The system prompt to set the context.
            user_prompt (str): The user prompt to generate a response for.
        Returns:
            str: The generated response from the model.
        """
        try:
            response = self.api.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=self.temperature,
                max_tokens=1000,
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"Error generating response: {e}")
            return ""

    @staticmethod
    def check_answer_correctness(model_answer: Any, task_dict: dict):
        """
        Check if the model's answer is correct based on the task.
        Args:
            model_answer (Any): The answer generated by the model.
            task_dict (dict): The task containing the correct answer and choices.
        Returns:
            bool: True if the model's answer is correct, False otherwise.

        task_dict is a dictionary with the following structure:
            {
                'question': str,
                'subject': str,
                'choices': list of str,
                'answer': int (index of the correct answer in choices)
            }
        task_dict can be obtained from mmlu dataset: load_dataset("cais/mmlu", "all")['test'][0]
        """
        if type(model_answer) != str:
            model_answer = str(model_answer)
        correct_answer = task_dict['choices'][task_dict['answer']]
        return model_answer == correct_answer